1、数据中心：
    a. 数据中心包括数据下发和数据持久化
    b. 数据持久化分为两部分，分别是　已接受数据存储 和 离线数据存储
    c. 离线数据存储利用redis数据进行存储，如果接受者处于离线状态，数据分别存储于 数据库和离线数据存储
    d. 当用户上线时，直接让离线数据存储推数据到用户页面，并根据该数据作为未读数据

TODO:
     1、 利用redis存储线上用户信息，以及保存离线消息
     2、 用于保存用户离线消息, 当用户上线时，推送相应的离线数据
     3、 当用户上线时，对每个用户添加一个UUID, 将这个UUID作为key保存在redis中，并且将websocket connect保存在缓存中
     4、websocket 在客户端进行心跳检测，如果后端没有接受到对应的ws请求时，则认为客户端离线，删除缓存中的ws connect请求信息， 删除redis中用户信息

数据分页:
     default.Config.Count = 100
     default.Config.Timeout = 100

     SessionMessage {
          gorm.Model // 包含Session ID, Create_At, Update_At, Delete_At等信息
          SourceID
          DestinationID
          MessageBody []
     }

     1. if len(SessionMessage.MessageBody) > default.Config.Count => new SessionMessage
     2. if time.Now().Sub(SessionMessage.Create_At) > Timeout => new SessionMessage

     job: 每隔５分钟，进行数据清洗，清洗已经超过保存时间的message

     单聊， 群聊， 系统通知


 # 将ws的msg改造为Event
 # Event 包含两种使用，一种是日志的记录，另外一种是后端将事件下发给前端使用
 Action: ["Login", "Logout", "Send_Message", "Receive_Message"]
 Event {
    Action String
    SourceID int
    Destination int
    DisplaySourceName string
    DisplayDestinationName string
    Content string
 }

// 已经实现
    相互加好友要对方进行确认，如果对方拒绝则添加好友失败， 因此要将 好友添加请求的信息保存在数据库中
    在用户设置页面可以设置当别人添加自己为好友时不进行验证

如果使用webRTC在浏览器中，则需要用户先发起视频请求，如果说接收方同意该请求，则开启webRTC
需要实现一个MessageEvent, 过期时间为30秒，如果接受方未接受并且超过过期时，则将该消息进行实例化到数据库中，如果用户进行接收，则在视频结束后进行消息的实例化
首先将用户发起的视频请求保存在redis中，等待视频未接收或者接受视频并结束后，构建请求实例， 并将该实例写入数据库记录

用户Ａ向用户Ｂ发起视频请求时，如果用户Ｂ在进行视频通话则不能进行视频链接
当用户Ｂ同意用户Ａ的视频请求时，则开始进行peerConnection的建立，并将自己的mediaStream发送给对方
当用户A、B挂断链接时，需通知对方

/*
	package Message 主要用来实现各种message的定义， 并且最终序列化到是数据库中，作为用户的一条message或者存储在redis缓存中

	消息内容包含：
		1、文本消息
		2、图片消息
		3、视频请求消息 (webRTC）
		4、音频请求消息 (webRTC）
		5、语音消息

	MessageText
	MessageImage

	(在序列化为message时，需要延迟执行， 需要记录消息的状态，成功与否，如果成功则需记录消息的时长)
	MessageVedioOnline
	MessageAudioOnline
	MessageAudioOffline
*/


信息：
    1、文本信息
    2、图片信息
    3、语音信息
    4、语音/视频请求信息

    公用信息：
        Scope: {
            Type: string
            RoomID: string
            UserID: String
            Content: interface{}
        }